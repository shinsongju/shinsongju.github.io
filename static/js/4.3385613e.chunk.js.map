{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","Info","재고","TabContent","useEffect","스위치변경","누른탭","connect","state","reducer","alert열렸니","reducer2","useState","alert","alert변경","누른탭변경","스위치","useContext","재고context","axios","get","타이머","setTimeout","clearTimeout","id","useParams","history","useHistory","찾은상품","shoes","find","상품","className","src","width","title","content","price","onClick","dispatch","type","데이터","name","quan","push","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"oNAaIA,EAAKC,IAAOC,IAAV,iDAIFC,EAAKF,IAAOG,GAAV,qEAES,SAAAC,GAAK,OAAIA,EAAMC,gBA0G9B,SAASC,EAAKF,GACZ,OACE,iDAAWA,EAAMG,aAAG,GAApB,OAIJ,SAASC,EAAWJ,GAKlB,OAJAK,qBAAU,WACRL,EAAMM,gCAAM,MAGI,IAAdN,EAAMO,mBACD,iFAEc,IAAdP,EAAMO,mBACN,iFAEc,IAAdP,EAAMO,mBACN,sFADJ,EAaQC,uBARf,SAAsBC,GACpB,MAAO,CAEHA,MAAQA,EAAMC,QACdC,0BAAWF,EAAMG,YAIRJ,EAzHf,SAAgBR,GACd,MAAuBa,oBAAS,GAAhC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAA+BF,mBAAS,IAAxC,mBACA,GADA,UACmBA,mBAAS,IAA5B,mBAAKN,EAAL,KAAUS,EAAV,KACA,EAAmBH,oBAAS,GAA5B,mBAAKI,EAAL,KAAUX,EAAV,KACSY,qBAAWC,KAOpBd,qBAAU,WAERe,IAAMC,MAEN,IAAIC,EAAMC,YAAW,WACnBR,GAAQ,KACP,KAKH,OAAO,WAAQS,aAAaF,MAC3B,CAACR,IAGJ,IAAMW,EAAOC,cAAPD,GACFE,EAAUC,cACVC,EAAO7B,EAAM8B,MAAMC,MAAK,SAASC,GACnC,OAAOA,EAAGP,IAAMA,KAGlB,OACE,sBAAKQ,UAAU,YAAf,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAIA,UAAU,MAAd,yBAQU,IAAVnB,EACG,qBAAKmB,UAAU,kBAAf,SACC,iHAEF,KAGJ,sBAAKA,UAAU,MAAf,UACA,qBAAKA,UAAU,WAAf,SACE,qBAAKC,IAAM,6CAA+CL,EAAKJ,GAAG,GAAK,OAASU,MAAM,WAExF,sBAAKF,UAAU,gBAAf,UACE,qBAAIA,UAAU,OAAd,cAAwBJ,EAAKO,MAA7B,OACA,kCAAMP,EAAKQ,QAAX,OACA,kCAAMR,EAAKS,MAAX,aACA,cAACpC,EAAD,CAAM,eAAKF,EAAMG,eACjB,wBAAQ8B,UAAU,iBAAiBM,QAAU,WAM3CvC,EAAMwC,SAAS,CAAEC,KAAO,2BAAQC,qBAAM,CAAEjB,GAAGI,EAAKJ,GAAIkB,KAAKd,EAAKO,MAAOQ,KAAK,KAC1EjB,EAAQkB,KAAK,UAPf,sCALF,OAgBE,wBAAQZ,UAAU,iBAAiBM,QAAU,WAAMZ,EAAQkB,KAAK,MAAhE,4CAIF,eAAC,IAAD,CAAKZ,UAAU,OAAOa,QAAQ,OAAOC,iBAAiB,SAAtD,UACE,cAAC,IAAIC,KAAL,UACE,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASX,QAAU,WAAMvB,EAAM,GAAIV,GAAM,IAA5D,sBAEF,cAAC,IAAI0C,KAAL,UACE,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASX,QAAU,WAAMvB,EAAM,GAAIV,GAAM,IAA5D,2BAIJ,cAAC,IAAD,CAAe6C,GAAKlC,EAAMmC,WAAW,MAAMC,QAAU,IAArD,SACA,cAACjD,EAAD,CAAY,qBAAMG,EAAM,iCAAQD","file":"static/js/4.3385613e.chunk.js","sourcesContent":["/* eslint-disable */\r\n\r\nimport axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport './Detail.scss';\r\nimport { 재고context } from './App.js';\r\nimport { Nav } from 'react-bootstrap'\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\n\r\n// styled-components의 장점 : 컴포넌트가 많아지면 class 겹칠 일이 줄어듦\r\nlet 박스 = styled.div`\r\n    padding : 20px;\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n    font-size : 25px;\r\n    color : ${ props => props.색상 };\r\n`;\r\n\r\n// Hook으로 컴포넌트의 lifecycle 사이사이에 명령을 줄 수 있음\r\n// 이건 옛날 방식인가봄\r\n// class Detail2 extends React.Component {\r\n//     componentDidMount() {\r\n\r\n//     }\r\n\r\n//     componentWillUnmount() {\r\n\r\n//     }\r\n// }\r\n\r\nfunction Detail(props) {\r\n  let [alert, alert변경] = useState(true);\r\n  let [inputData, inputData변경] = useState('');\r\n  let [누른탭, 누른탭변경] = useState(0);\r\n  let [스위치, 스위치변경] = useState(false);\r\n  let 재고 = useContext(재고context);\r\n\r\n  // 이게 요즘 방식\r\n  // 컴포넌트가 mount 되었을 때, update 되었을 때 특정 코드를 실행할 수 있음\r\n  // 여러 번 적어도 됨 적은 순서로 실행됨\r\n  // [alert]는 alert의 상태가 변경될 때만 실행하라는 의미... [alert, inputData...] 등등 더 적을 수도 있음\r\n  // []가 빈칸이라면 맞는 조건이 없기 때문에 페이지가 로드됐을때만 한번 실행되고 그 이후엔 안 됨\r\n  useEffect(()=>{\r\n    // Detail 페이지가 로드됐을 때만 한번 실행시킬 것이라면 useEffect의 조건에 [] 달아주면 됨\r\n    axios.get();\r\n    \r\n    let 타이머 = setTimeout(()=>{\r\n      alert변경(false);\r\n    }, 2000);\r\n\r\n    // 컴포넌트가 unmount 될 때(Detail이라는 컴포넌트가 사라질 때) 실행하려면 return 이용\r\n    // return function 어쩌구(){ 실행할 코드 };\r\n    // return ()=>{ 실행할 코드 };\r\n    return () => { clearTimeout(타이머) }\r\n  }, [alert]);\r\n\r\n    \r\n  let { id } = useParams();\r\n  let history = useHistory();\r\n  let 찾은상품 = props.shoes.find(function(상품) {\r\n    return 상품.id == id;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <박스>\r\n        <제목 className=\"red\"> Detail </제목>\r\n          {/* <제목 색상={ 'red' }> Detail </제목> */}\r\n      </박스>\r\n      \r\n      {/* { inputData }\r\n      <input onChange={ (e)=>{ inputData변경(e.target.value) } }/> */}\r\n      \r\n      {\r\n        alert === true\r\n        ? (<div className=\"my-alert-yellow\">\r\n            <p> 재고가 얼마 남지 않았습니다. </p>\r\n          </div>)\r\n        : null\r\n      }      \r\n\r\n      <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <img src={ 'https://codingapple1.github.io/shop/shoes' + (찾은상품.id+1) + '.jpg' } width=\"100%\" />\r\n      </div>\r\n      <div className=\"col-md-6 mt-4\">\r\n        <h4 className=\"pt-5\"> { 찾은상품.title } </h4>\r\n        <p> { 찾은상품.content } </p>\r\n        <p> { 찾은상품.price }원 </p>\r\n        <Info 재고={ props.재고 }></Info>\r\n        <button className=\"btn btn-danger\" onClick={ ()=>{ \r\n          // var arrayCopy = [...props.재고];\r\n          // arrayCopy[0]--;\r\n          // props.재고변경(arrayCopy);\r\n\r\n          // 데이터라고는 했지만 보통은 payload라고 선언함\r\n          props.dispatch({ type : '항목추가', 데이터 : { id:찾은상품.id, name:찾은상품.title, quan:1 } });\r\n          history.push('/cart');\r\n        } }>주문하기</button> \r\n        &nbsp;\r\n        {/* history.push('/') 는 '/' 라는 경로로 이동시켜줌 */}\r\n        <button className=\"btn btn-danger\" onClick={ ()=>{ history.push(\"/\"); } }>뒤로가기</button>\r\n      </div>\r\n      </div>\r\n\r\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-0\" onClick={ ()=>{ 누른탭변경(0); 스위치변경(false) } }>Active</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-1\" onClick={ ()=>{ 누른탭변경(1); 스위치변경(false) } }>Option 2</Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <CSSTransition in={ 스위치 } classNames=\"wow\" timeout={ 500 }>\r\n      <TabContent 누른탭={ 누른탭 } 스위치변경={ 스위치변경 }/>\r\n      </CSSTransition>\r\n    </div> \r\n  )\r\n}\r\n\r\nfunction Info(props) {\r\n  return (\r\n    <p> 재고 : { props.재고[0] } </p>\r\n  )\r\n}\r\n\r\nfunction TabContent(props) {\r\n  useEffect(()=>{\r\n    props.스위치변경(true);\r\n  });\r\n\r\n  if (props.누른탭 === 0) {\r\n    return <div> 0번째 내용입니다 </div>\r\n  }\r\n  else if (props.누른탭 === 1) {\r\n    return <div> 1번째 내용입니다 </div>\r\n  }\r\n  else if (props.누른탭 === 2) {\r\n    return <div> 2번째 내용입니다 </div>\r\n  }\r\n}\r\n\r\nfunction state를props화(state) {\r\n  return {\r\n      // 상품명 : state[0].name\r\n      state : state.reducer,\r\n      alert열렸니 : state.reducer2\r\n  }\r\n}\r\n\r\nexport default connect(state를props화)(Detail);\r\n// export default Detail;"],"sourceRoot":""}